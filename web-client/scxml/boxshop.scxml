<scxml initial="form">
  <state id="form" initial="selectFormItem">
    <datamodel>
      :- dynamic 
           welcome/1,
           color/1,
           size/1.
    </datamodel>

      <state id="selectFormItem">
        <go to="Welcome" if="\+ welcome(_)"/>
        <go to="Color"   if="\+ color(_)"/>
        <go to="Size"    if="\+ size(_)"/>
        <go to="Respond"/>
      </state>
      <state id="Welcome">
        <onentry>
          writeln('Welcome to the box shop!'),
          assert(welcome(true))
        </onentry>
        <go to="selectFormItem"/>
      </state>
      <state id="Color">
        <onentry>
          writeln('What color do you want?'),
          self(Self),
          snd(Self, timeout, [delay(5), id(a)])
        </onentry>
        <onexit>
          cancel(a)
        </onexit>
        <go to="selectFormItem" on="says(color(Color))">
          assert(color(Color))
        </go>
      </state>
      <state id="Size">
        <onentry>
          writeln('What size do you want?'),
          self(Self),
          snd(Self, timeout, [delay(5), id(a)])
        </onentry>
        <onexit>
          cancel(b)
        </onexit>
        <go to="selectFormItem" on="says(size(Size))">
          assert(size(Size))
        </go>
      </state>
      <state id="Respond">
        <onentry>
          size(Size), color(Color),
          format('You want a ~p ~p box!\n', [Size, Color]),
          retractall(color(_)),
          retractall(size(_))
        </onentry>
      </state>
      <go to="selectFormItem" on="says(_)">
        writeln('I did not understand.')
      </go>
      <go to="selectFormItem" on="timeout">
        writeln('I did not hear you.')
      </go>
  </state>
  <go to="end" on="end"/>
  <final id="end"/>
</scxml>