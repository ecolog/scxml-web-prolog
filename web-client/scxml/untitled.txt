<scxml initial="form">
  <state id="form">
    <datamodel>
      :- dynamic 
           welcome/1,
           color/1,
           size/1.
    </datamodel>
    <initial>
      <transition target="select_form_item"/>
    </initial>
    <state>
      <state id="select_form_item">
        <transition target="Welcome" cond="\+ welcome(_)"/>
        <transition target="Color" cond="\+ color(_)"/>
        <transition target="Size" cond="\+ welcome(_)"/>
        <transition target="respond"/>
      </state>
      <state id="Welcome">
        <onentry>
          writeln('Welcome to the box shop!'),
          assert(welcome(true))
        </onentry>
        <transition target="select_form_item"/>
      </state>
      <state id="Color">
        <onentry>
          writeln('What color do you want?'),
          raise(timeout, [delay(5), sendid(a)])
        </onentry>
        <onexit>
          cancel_send(a)
        </onexit>
        <transition target="select_form_item" event="says(color(Color))">
          assert(color(Color))
        </transition>
      </state>
      <state id="Size">
        <onentry>
          writeln('What size do you want?'),
          raise(timeout, [delay(5), sendid(b)])
        </onentry>
        <onexit>
          cancel_send(b)
        </onexit>
        <transition event="says(size(Size))" target="select_form_item">
          assert(size(Size))
        </transition>
      </state>
      <state id="respond">
        <onentry>
          format('You want a ~p ~p  box!', [Size, Color])
          retractall(color(_))
          retractall(size(_))
        </onentry>
        <transition target="select_form_item"/>
      </state>
      <transition event="says(_)" target="select_form_item">
        writeln('I did not understand.')
      </transition>
      <transition event="timeout" target="select_form_item">
        writeln('I did not hear you.')
      </transition>
    </state>
    <transition event="end" target="end"/>
  </state>
  <final id="end"/>
</scxml>